
// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_CLKOUT// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = ON       // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define __XTAL_FREQ 4000000

#define RS RE0  // Define pin connections for LCD control signals
#define RW RE2
#define EN RE1
#define LCD PORTD // Define data port for LCD communication 

void delay(unsigned int d) { // Simple delay function
    while (d--);
}

void pulse() 
{ 
    EN = 1;
    delay(1000);
    EN = 0;
    delay(1000);
}



void type() 
{
    RS = 0;     // Select command register
    RW = 0;     // Set write operation
    LCD = 0x38;
    
    pulse();
}


void clear() 
{
    RS = 0;     // Select command register
    RW = 0;     // Set write operation
    LCD = 0x01;
    
    pulse();
}


void on() 
{
    RS = 0;     // Select command register
    RW = 0;     // Set write operation
    LCD = 0x0E; 
    pulse();
}

void one()
{
    RS = 0;     // Select command register
    RW = 0;     // Set write operation
    LCD = 0x1C; 
    pulse();
}

void dec()
{ 
    RS = 0;     // Select command register
    RW = 0;     // Set write operation
    LCD = 0X06; // Send set DDRAM address command
    pulse();
}

void address()
{ 
    RS = 0;     // Select command register
    RW = 0;     // Set write operation
    LCD = 0X80; // Send set DDRAM address command
    pulse();
}

void data(char data)
{ 

    RS = 1;     // Select data register
    RW = 0;    // Set write operation       
    LCD = data;  // Send the character 'B'
    pulse();
     
    
}


void word(char *str)
{ 
    while(*str)
    {
        data(*str++);
    }
}

    

void main() 
{
    PORTD = 0x00; 
    TRISD = 0x00; 
    PORTE = 0x00; 
    TRISE = 0x00; 
    ANSEL=ANSELH= 0x00; 
     
    clear();
    type();   // Initialize LCD in 8-bit mode, 2 lines, 5x7 font
    on();     // Turn on LCD display and cursor
    
   // dec();
    while (1)// Infinite loop:
    { 
        address(); // Set cursor to first line, first column
        word("I AM BATMAN");     // Display character 'B'
       one();
    }
    return;
}
